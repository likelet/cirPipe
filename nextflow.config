
//check the code
/*
 * -------------------------------------------------
 *  circPipe Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  genomebuild='hg19'// should be a abbrivation of genome build for  circos plot
  skipQuant=false

 
  
  //reads files

  // design files and compare file 

  // library type 
  library='rnase' // 'total' : presents the total RNAseq or ployA negative libaray
  singleEnd = false
  

  //the  directory
  inputdir='./'
  outdir = './Result'


  //choose the tools
  separate = false
  merge = true
  selectTools = '1,2,3,4'

  // info
  help = false
  tracedir = "${params.outdir}/pipeline_info"

  skipDE=false
  skip_fastp=false

  email=false 

}

profiles {

  standard {
    includeConfig 'conf/base.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker {
    includeConfig 'conf/docker.config'
  }
  
  // test on the paratera hpc 
  para {
    includeConfig 'conf/para.config'
  }
  
  c2 {
    includeConfig 'conf/base.config'
    includeConfig 'conf/C2.config'
  }
  xu1 {
    includeConfig 'conf/base.config'
    includeConfig 'conf/xu1.config'
  }

  xu2 {
    includeConfig 'conf/base.config'
    includeConfig 'conf/xu2.config'
  }

  singularity {
    
    includeConfig 'conf/sing.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/igenomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
  }
  testqc {
    includeConfig 'conf/testQC.config'
  }
  testred {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test_red.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/circpipe_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/circpipe_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/circpipe_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/circpipe_dag.svg"
}

manifest {
  name = 'circpipe'
  author = 'Qi Zhao(zhaoqi@sysucc.org.cn)'
  homePage = 'https://github.com/likelet/cirpipe'
  description = 'cirRNA analysis pipe'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.19.0'
  version = '1.0dev'
}


  cpus = { check_max( 8, 'cpus' ) }
  memory = { check_max( 20.GB * task.attempt, 'memory' ) }
  time = { check_max( 240.h * task.attempt, 'time' ) }

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

